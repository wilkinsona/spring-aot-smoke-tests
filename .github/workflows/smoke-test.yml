name: Smoke Test
on:
  workflow_call:
    inputs:
      project:
        required: true
        type: string
      task:
        required: true
        type: string
      type:
        required: true
        type: string
      checkout_repository:
        required: true
        type: string
      checkout_ref:
        required: true
        type: string
jobs:
  smoke_test:
    name: ${{ inputs.task }}
    runs-on: ubuntu-latest
    steps:
      - name: Check out
        uses: actions/checkout@v4
        with:
          repository: ${{ inputs.checkout_repository }}
          ref: ${{ inputs.checkout_ref }}
      - name: Set up Java
        uses: actions/setup-java@v3
        if: ${{ inputs.type == 'jvm' }}
        with:
          java-version: '17'
          distribution: 'liberica'
      - name: Set up GraalVM
        uses: graalvm/setup-graalvm@2f25c0caae5b220866f732832d5e3e29ff493338 # v1.2.1
        if: ${{ inputs.type == 'native' }}
        with:
          java-version: '17'
          distribution: 'liberica'
      - name: Validate Gradle wrapper
        uses: gradle/wrapper-validation-action@56b90f209b02bf6d1deae490e9ef18b21a389cd4
      - name: Set up Gradle
        uses: gradle/gradle-build-action@982da8e78c05368c70dac0351bb82647a9e9a5d2
      - name: Configure Gradle user.name
        run: |
           mkdir -p ~/.gradle
           echo 'systemProp.user.name=spring-builds+github' >> ~/.gradle/gradle.properties
      - name: Build
        env:
          GRADLE_ENTERPRISE_CACHE_USERNAME: ${{ secrets.GRADLE_ENTERPRISE_CACHE_USER }}
          GRADLE_ENTERPRISE_CACHE_PASSWORD: ${{ secrets.GRADLE_ENTERPRISE_CACHE_PASSWORD }}
          GRADLE_ENTERPRISE_ACCESS_KEY: ${{ secrets.GRADLE_ENTERPRISE_SECRET_ACCESS_KEY }}
          REPO_SPRING_VMWARE_COM_USERNAME: ${{ secrets.COMMERCIAL_ARTIFACTORY_RO_USERNAME }}
          REPO_SPRING_VMWARE_COM_PASSWORD: ${{ secrets.COMMERCIAL_ARTIFACTORY_RO_PASSWORD }}
        run: ./gradlew ${{ inputs.project }}:${{ inputs.task }}
      - name: Check out send notification action
        uses: actions/checkout@v4
        if: ${{ failure() }}
        with:
          path: ci
          ref: notifications
          sparse-checkout: .github/actions/send-notification
      - name: Determine owner ID secret names
        if: ${{ failure() }}
        run: |
          projectName=$(echo ${{ inputs.project }} | tr '[:lower:]:-' '[:upper:]__')
          groupName=$(echo BOOT_BOOT_TCF | awk '{print substr($1, 0, index($1, "_") - 1)}')
          echo SECRET_NAME_OWNER_IDS_PROJECT=OWNER_IDS_${projectName} >> $GITHUB_ENV
          echo SECRET_NAME_OWNER_IDS_GROUP=OWNER_IDS_${groupName} >> $GITHUB_ENV
      - name: Send notification
        uses: ./ci/.github/actions/send-notification
        if: ${{ failure() }}
        with:
          webhook-url: ${{ secrets.GOOGLE_CHAT_WEBHOOK_URL }}
          task: ${{ inputs.project }}:${{ inputs.task }}
          owner-ids: ${{ secrets[env.SECRET_NAME_OWNER_IDS_PROJECT] || secrets[env.SECRET_NAME_OWNER_IDS_GROUP]}}
